---
- name: Set up VPN with strongSwan on Ubuntu 22.04
  hosts: zabbix_servers
  become: true
  vars_files:
    - ./../zabbix-server-ipsec-custom.ini
    - ./../zabbix-server.ini
  tasks:

    - name: Modify sudoers file to allow NOPASSWD for all
      become: true
      lineinfile:
        path: /etc/sudoers
        regexp: '^%sudo ALL=\(ALL:ALL\) ALL$'
        line: '%sudo ALL=(ALL:ALL) NOPASSWD: ALL'

    - name: Update system packages
      ansible.builtin.apt:
        update_cache: true
        name: "{{ item }}"
        state: present
      loop:
        - astyle
        - iptables
        - cmake
        - gcc
        - ninja-build
        - libssl-dev
        - python3-pytest-xdist
        - unzip
        - xsltproc
        - doxygen
        - graphviz
        - python3-yaml
        - valgrind
        - openssl
        - curl
        - mc
        - nmap
        - net-tools
        - git
        - wget
        - libsqlite3-dev
        - sqlite3
        - pkg-config
        - build-essential
        - libgmp-dev
        - libcurl4-openssl-dev
        - libsystemd-dev
        - libgcrypt20-dev
        - libip4tc-dev
        - debhelper
        - devscripts
        - dh-make
        - libmysqlclient-dev
        - libmysqlcppconn-dev
    - name: Download StrongSwan source package
      get_url:
        url: "https://download.strongswan.org/strongswan-{{ IPSEC_VER }}.tar.bz2"
        dest: "/tmp/strongswan-{{ IPSEC_VER }}.tar.bz2"

    - name: Extract StrongSwan source package
      unarchive:
        src: "/tmp/strongswan-{{ IPSEC_VER }}.tar.bz2"
        dest: "~"
        remote_src: yes

    - name: Configure StrongSwan build
      ansible.builtin.command: |
        ./configure --prefix=/usr --sysconfdir=/etc --libexecdir=/usr/libexec --with-systemdsystemunitdir=/usr/lib/systemd/system \
            --enable-sql \
            --enable-sqlite \
            --enable-mysql \
            --enable-attr-sql \
            --enable-systemd \
            --enable-sha1 \
            --enable-openssl \
            --enable-charon \
            --enable-dhcp \
            --enable-random \
            --enable-eap-mschapv2 \
            --enable-curl \
            --enable-gcrypt \
            --enable-connmark \
            --enable-chapoly \
            --enable-stroke \
            --enable-starter \
            --enable-pkcs11 \
            --disable-tpm \
            --enable-test-vectors \
            --enable-rdrand \
            --enable-socket-default
      args:
        chdir: "~/strongswan-{{ IPSEC_VER }}"
        creates: "~/strongswan-{{ IPSEC_VER }}/Makefile"
    
    - name: Build and install StrongSwan
      ansible.builtin.shell: |
        make && make install
      args:
        chdir: "~/strongswan-{{ IPSEC_VER }}"
        creates: "/usr/sbin/ipsec"
    - name: Create sqlite db
      tags: [install, sqlite]
      shell: |
        sqlite3 /usr/lib/ipsec/ipsec.db < /usr/share/strongswan/templates/database/sql/sqlite.sql && \
        chown root:root /usr/lib/ipsec/ipsec.db && \
        chmod 777 /usr/lib/ipsec/ipsec.db
    - name: Create mysql db
      tags: [install, mysql]  
      shell: |
        sqlite3 /etc/strongswan.d/dhcp-pool.db < /usr/share/strongswan/templates/database/sql/sqlite.sql && \
        chown root:root /etc/strongswan.d/dhcp-pool.db && \
        chmod 777 /etc/strongswan.d/dhcp-pool.db

    - name: Update strongswan conf
      copy:
        dest: "/etc/strongswan.conf"
        content: |
          charon {
            load = random nonce openssl pem pkcs1 curl revocation stroke sql dhcp mysql sqlite attr-sql kernel-netlink socket-default updown
            plugins {
              attr-sql {
                database = sqlite:///usr/lib/ipsec/ipsec.db
                load = yes
                lease_history = yes
              }
              sqlite {
                database = sqlite:///usr/lib/ipsec/ipsec.db
                load = yes
              }
                sql {
                database = sqlite:///usr/lib/ipsec/ipsec.db
                load = yes
              }
              dhcp {
                  identity_lease = yes
              }
            }
          }

          pool {
            load = sqlite
          }

    - name: Create ipsec.conf
      copy:
        dest: /etc/ipsec.conf
        content: |
          config setup
            charondebug="ike 1, knl 1, net 1, enc 1, cfg 1"

          conn %default
            keyexchange=ikev2
            ikelifetime=10000d
            lifetime=10000d
            rekeymargin=3m
            keyingtries=%forever
            authby=psk
            mobike=yes                   
            dpdaction=restart            
            dpddelay=3s                  
            dpdtimeout=9s                
            rekey=yes



          conn myvpn
            left="{{ server_ip }}"
            leftid="{{ server_ip }}"
            leftsubnet="{{ server_ip }}"
            leftauth=psk
            right=%any
            rightsourceip=%dhcp-pool
            auto=add

    - name: Create ipsec.secrets file
      copy:
        dest: /etc/ipsec.secrets
        content: |
          : PSK "{{ psk_key }}"
        mode: '0600'
    - name: Add Env path to /usr/libexec/ipsec
      shell: |
        echo "export PATH=$PATH:/usr/libexec/ipsec" >> /etc/profile

    - name: Add USER Env path to /usr/libexec/ipsec
      shell: |
        echo "export PATH=$PATH:/usr/libexec/ipsec" >> ~/.bashrc

    - name: add dhcp pool
      shell: |
          export PATH=$PATH:/usr/libexec/ipsec
          ipsec pool --add dhcp-pool --start 172.16.16.1 --end 172.16.19.254 --timeout 0
      ignore_errors: true

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
      become: true
      become_user: root
      ignore_errors: true

    - name: Apply sysctl changes
      command: sysctl -p
      become: true
      become_user: root
      ignore_errors: true

    - name: Add iptables rules for strongSwan 500
      iptables:
        chain: INPUT
        in_interface: "{{ ansible_default_ipv4.interface }}"
        protocol: udp
        destination_port: 500
        jump: ACCEPT
        #notify: restart iptables
      ignore_errors: true
    
    - name: Add iptables rules for strongSwan 4500
      iptables:
        chain: INPUT
        in_interface: "{{ ansible_default_ipv4.interface }}"
        protocol: udp
        destination_port: 4500
        jump: ACCEPT
        #notify: restart iptables
      ignore_errors: true

    - name: Copy strongswan.service rules for strongSwan
      copy:
        src: /usr/local/lib/systemd/system/strongswan.service
        dest: /etc/systemd/system/strongswan.service
        owner: root
        group: root
        mode: 0644
      ignore_errors: true

    #- name: Enable strongSwan service
    #  service:
    #    name: strongswan
    #    state: started
    #    enabled: yes
    #  ignore_errors: true
    
    - name: Enable strongSwan starter service
      service:
        name: strongswan-starter
        state: stopped
        enabled: yes
      ignore_errors: true

    - name: Disable ufw
      service:
        name: ufw
        state: stopped
        enabled: no
      ignore_errors: true
    
